%%Splitting
ffmpeg -i "Monster Hunter World 2018.10.28 - 18.20.11.03.DVR".mp4  -t 00:00:50 -map 0 -c copy smallfile1.mp4 -ss 00:00:50 -map 0 -c copy smallfile2.mp4

%%Trimming! - Removes start footage up to the time specified

ffmpeg -i "For Honor 2018.07.27 - 21.40.06.04.DVR".mp4 -ss 00:00:43 -map 0 -vcodec copy -acodec copy output.mp4


%multichannel support (Modified from below)
ffmpeg -i "Monster Hunter World 2018.08.16 - 00.19.16.03.DVR".mp4 -filter_complex '[0:a:0][l]amerge=inputs=2[a]' -map '0:v:0' -map '[a]' -c:v copy -c:a libmp3lame -q:a 3 -ac 2 'output.mp4'

%Original Multichannel
ffmpeg -i 'Monster Hunter World 2018.08.16 - 00.19.16.03.DVR.mp4' -filter_complex '[0:a:1]volume=0.1[l];[0:a:0][l]amerge=inputs=2[a]' -map '0:v:0' -map '[a]' -c:v copy -c:a libmp3lame -q:a 3 -ac 2 'output.mp4'

%Merging
>Place all video files in this folder, then make the mergelist file using (NOTE: Make sure the format .mov or .mp4 matches
(for %i in (*.mov) do @echo file '%i') > MergeList.txt
Then, you can merge using:
ffmpeg -f concat -i MergeList.txt -c copy output.mp4


%Loop video back around on itself: 
ffmpeg -i input.mp4 -filter_complex "[0:v]reverse,fifo[r];[0:v][r] concat=n=2:v=1 [v]" -map "[v]" output.mp4



%Merging Image Files to a lossless .mp4 (Note: Name%d means numbered files of the format Name01, Name02 etc..)
ffmpeg -r 15 -i Name%d.png -vcodec libx264 -b 800k out.mp4"

%Convert Video file to GIF
Generate palette:
ffmpeg -i Out.mp4 -filter_complex "fps=24,scale=-1:640,crop=ih:ih,setsar=1,palettegen" palette.png
Create GIF:
ffmpeg -i Out.mp4 -i palette.png -filter_complex "[0]fps=24,setsar=1[x];[x][1:v]paletteuse" Gauss3x3Res.gif




$Convert Gif file to Video
ffmpeg -i your_gif.gif -c:v libvpx -crf 12 -b:v 500K output.webm

%Convert png sequence to gif
Generate palette:
ffmpeg -i Out.mp4 -filter_complex "fps=24,scale=-1:640,crop=ih:ih,setsar=1,palettegen" palette.png
ffmpeg -framerate 2 -i Gauss-3x3ResDif%d.png -i palette.png -filter_complex "[0]fps=24,setsar=1[x];[x][1:v]paletteuse"  output.gif


filter_complex is a series of filters that operates on the input. Inside it, filters have inputs and outputs that are the parts in square brackets. So a filter with two inputs looks like this: [input0][input1]filter[output].
[0:a:1] picks the 0th input file’s 1st audio track as input for the filter.
volume=0.1[l] lowers the volume (this can also use dB units) and puts the result into l.
[0:a:0][l] selects both the 0th input file’s 0th audio track and l from the previous filter as inputs.
amerge=inputs=2 merges the given 2 input audio tracks. Here you would need to modify the 2 and the inputs if you had more than 2 audio tracks to merge.
[a] puts the output of the amerge into a.
map switches select the used video and audio tracks for the output. Here we use the original video as video track and the filtered audio a as the audio track.
c:v copy sets video codec to copy which just copies it without changing.
c:a libmp3lame uses LAME to convert the audio to MP3, here you could use some other codec if you wanted.
q:a 3 is VBR quality 3 for the LAME codec.
ac 2 sets output audio to have 2 channels (stereo).