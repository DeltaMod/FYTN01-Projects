Software repository for the projects included in the FYTN03 - Computational Physics
                     ____            _           _     _                              
                    |  _ \ _ __ ___ (_) ___  ___| |_  / | __ _                        
                    | |_) | '__/ _ \| |/ _ \/ __| __| | |/ _` |                       
                    |  __/| | | (_) | |  __/ (__| |_  | | (_| |                       
                    |_|   |_|  \___// |\___|\___|\__| |_|\__,_|                       
  ____  _                         |__/__                           _ _                
 |  _ \(_)___  ___  __ _ ___  ___  / ___| _ __  _ __ ___  __ _  __| (_)_ __   __ _    
 | | | | / __|/ _ \/ _` / __|/ _ \ \___ \| '_ \| '__/ _ \/ _` |/ _` | | '_ \ / _` |   
 | |_| | \__ \  __/ (_| \__ \  __/  ___) | |_) | | |  __/ (_| | (_| | | | | | (_| |   
 |____/|_|___/\___|\__,_|___/\___| |____/| .__/|_|  \___|\__,_|\__,_|_|_| |_|\__, |   
  _____ _____ _____ _____ _____ _____ ___|_|_____ _____ _____ _____ _____ ___|___/___ 
 |_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|
                                                                                      
  Located in FYTN03-Projects/Project1a/code.py
The main file is  "Main - P1b-SIS_SIR Model.py"
It should be heavily commented so that it should (mostly) make sense!

Summary: Euler ODE solver for disease propagation
Features: 
+ SIS and SIR models
+ Vaccination
+ Waning Immunity
+ Daily commuter weighting
+ Single, Predefined, and N number of random cities that can be run with these conditions

                                                                                                                      
                       ___ ___  ___     _ ___ ___ _____   ___                           
                    | _ \ _ \/ _ \ _ | | __/ __|_   _| |_  )                          
                    |  _/   / (_) | || | _| (__  | |    / /                           
                    |_| |_|_\\___/ \__/|___\___| |_|   /___|                          
  ___ __  __   _   ___ ___   ___ ___ ___ _____ ___  ___    _ _____ ___ ___  _  _      
 |_ _|  \/  | /_\ / __| __| | _ \ __/ __|_   _/ _ \| _ \  /_\_   _|_ _/ _ \| \| |     
  | || |\/| |/ _ \ (_ | _|  |   / _|\__ \ | || (_) |   / / _ \| |  | | (_) | .` |     
 |___|_|  |_/_/ \_\___|___| |_|_\___|___/ |_| \___/|_|_\/_/ \_\_| |___\___/|_|\_|     
  ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ ___ 
 |___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|
 |___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|___|
                                                                                      
 Located in FYTN03-Projects/Project 2 - Image Restoration
 We have two main files:
+ P2-FirstApproach.py - Which contains a standard the Laplacian implementation of image restoration
+ Main - IMRestore.py - Which contains several different implementations of image convolution filters.
                        Currently, the default 3x3-Gauss followed by 5x5-Gauss patches up the image pretty well
                        (you can run it for longer for better results)
                        The code contains a real space convolution, as well as full image convolution in frequency space,
                        AND a sectioned method that handles only the pixels surrounding the max!
               
